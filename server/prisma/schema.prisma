generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model patientapply {
  applyId     Int      @id @default(autoincrement())
  serviceTime DateTime
  applyDate   DateTime @default(now())
  whereInfo   String
  HowInfo     String
  applyUser Int
  user user @relation(fields: [applyUser], references: [userId])
}

model profile {
  profileId  Int      @id @default(autoincrement())
  userId     Int
  profileImg String
  proofImg   String
  proofInfo  String
  phoneNum   String
  created_at DateTime @default(now())
  user       user     @relation(fields: [userId], references: [userId], map: "Profile_userId_fkey")

  @@index([userId], map: "Profile_userId_fkey")
}

model progress {
  progressId Int             @id @default(autoincrement())
  userId     Int
  requestId  Int
  status     progress_status @default(Start)
  updated_at DateTime
  request    request         @relation(fields: [requestId], references: [requestId], map: "Progress_requestId_fkey")
  user       user            @relation(fields: [userId], references: [userId], map: "Progress_userId_fkey")

  @@index([requestId], map: "Progress_requestId_fkey")
  @@index([userId], map: "Progress_userId_fkey")
}

model request {
  requestId                     Int            @id @default(autoincrement())
  status                        request_status @default(Pending)
  senderId                      Int
  receiverId                    Int
  created_at                    DateTime       @default(now())
  updated_at                    DateTime
  progress                      progress[]
  user_request_receiverIdTouser user           @relation("request_receiverIdTouser", fields: [receiverId], references: [userId], map: "Request_receiverId_fkey")
  user_request_senderIdTouser   user           @relation("request_senderIdTouser", fields: [senderId], references: [userId], map: "Request_senderId_fkey")

  @@index([receiverId], map: "Request_receiverId_fkey")
  @@index([senderId], map: "Request_senderId_fkey")
}

model user {
  userId                           Int         @id @default(autoincrement())
  email                            String
  password                         String
  name                             String
  created_at                       DateTime    @default(now())
  Address                          String
  birth                            String
  role Role @default(USER)
  gender                           user_gender
  profile                          profile[]
  progress                         progress[]
  apply patientapply[]
  request_request_receiverIdTouser request[]   @relation("request_receiverIdTouser")
  request_request_senderIdTouser   request[]   @relation("request_senderIdTouser")
}

enum Role {
  USER
  ANGEL
}
enum request_status {
  Pending
  Accepted
  Declined
}

enum progress_status {
  Start
  Hospital
  Finish
}

enum user_gender {
  MALE
  FEMALE
}
